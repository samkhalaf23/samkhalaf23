# -*- coding: utf-8 -*-
"""hw4pt1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CrFUNMiTrmVwd14GRRZ1zRXQAc0Fe1PZ
"""

#Sammer Khalaf 

#In this program, you will train the decision tree machine learning model and evaluate its 
#accuracy. Split your data into training and test data. No specific proportion of training versus 
#test data is required. At the end of your program: 




import json, requests, matplotlib.pyplot as plt, sklearn.tree, sklearn.metrics,sklearn.model_selection, joblib

response = requests.get("https://dgoldberg.sdsu.edu/515/kiva_data_full.json")

if response: 
    data = json.loads(response.text)
    x = []
    y = []
   
    for line in data: 
        length = line["length"]
        loan_status = line["loan_status"]
        picture = line["number_of_pictures"]
        amount = line["loan_amount"]
        bonus = line["bonus_credit_eligibility"]
        user_fav = line["user_favorite_post"]
        #inner_list = [length, picture, amount, bonus, user_fav]
        #x.append(inner_list)
        #y.append(loan_status)

        if bonus == "no":
            bonus = 0
        if bonus == "yes":
            bonus = 1
        if user_fav == "no": 
            user_fav = 0 
        if user_fav == "yes":
            user_fav = 1
        inner_list = [length, picture, amount, bonus, user_fav]
        x.append(inner_list)
        y.append(loan_status)
        for p in range(len(y)): 
            if y[p] == "expired":
                y[p] = 0  
            if y[p] == "funded":
                y[p] = 1


        #for row in x: 
        #print(row)
    #model   
    x_train,x_test, y_train, y_test = sklearn.model_selection.train_test_split(x,y, random_state = 0, test_size = 0.2)
    clf = sklearn.tree.DecisionTreeClassifier()
    clf = clf.fit(x_train, y_train)


    predicitions = clf.predict(x_test)
    accuracy = sklearn.metrics.accuracy_score(y_test, predicitions)
    #Lets check accuracy
    print("Accuracy: ", accuracy)

    #Confusion Matrix 
    cm = sklearn.metrics.confusion_matrix(y_test, predicitions)
    disp = sklearn.metrics.ConfusionMatrixDisplay(cm)
    disp.plot(cmap =plt.cm.YlGn)
    plt.show()

    #Plot decision tree
    sklearn.tree.plot_tree(clf, max_depth = 3,feature_names = ["length","num_pics", "loan_amt","bonus","user_fav"], class_names = ["expired", "funded"])
    plt.show()
    joblib.dump(clf, "kiva_decision_tree.joblib")



else: 
    print("Sorry, connection error.")
